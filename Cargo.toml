[package]
name = "tlsn-extension-rs"
version = "0.1.0"
authors = ["The tlsn-extension Developers"]
edition = "2018"
rust-version = "1.56"

[lib]
crate-type = ["cdylib"]

[dependencies]
wasm-bindgen = "0.2.87"
js-sys = "0.3"
tlsn-prover = { path = "../tlsn/tlsn/tlsn-prover" }
getrandom = { version = "0.2", features = ["js"] }
ws_stream_wasm = "0.7.4"
wasm-bindgen-futures = "0.4.37"
# instant = { version = "0.1", features = ["wasm-bindgen"] }
# parking_lot = { version = "=0.11.1", features = ["wasm-bindgen"]}
ring = { version = "0.16" }
# NOTE: with flag `wasm32_c`, the code can compile but still encounter the original runtime issue
# ring = { version = "0.16", features = ["wasm32_c"] }
# NOTE: with the unreleased branch (0.17), the code cannot compile. It seems there are some breaking changes
# between 0.16 and 0.17
# ring = { git = "https://github.com/briansmith/ring", branch = "main", features = ["wasm32_unknown_unknown_js"] }

[dependencies.web-sys]
version = "0.3.22"
features = [
  "BinaryType",
  "Blob",
  "ErrorEvent",
  "FileReader",
  "MessageEvent",
  "ProgressEvent",
  "WebSocket",
]


# The `console_error_panic_hook` crate provides better debugging of panics by
# logging them with `console.error`. This is great for development, but requires
# all the `std::fmt` and `std::panicking` infrastructure, so isn't great for
# code size when deploying.
console_error_panic_hook = { version = "0.1.7", optional = true }

[dev-dependencies]
wasm-bindgen-test = "0.3.34"

[profile.release]
# Tell `rustc` to optimize for small code size.
